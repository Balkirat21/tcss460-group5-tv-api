{
	"info": {
		"_postman_id": "tv-api-collection-2025",
		"name": "Group 5 TV API",
		"description": "Comprehensive test collection for the Group 5 TV API with automated tests for all implemented routes",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Root Endpoint",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has welcome message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData.message).to.include('Welcome');",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{API_KEY}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BASE_URL}}/",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						""
					]
				},
				"description": "Tests the root endpoint to verify API is running and returns welcome message"
			},
			"response": []
		},
		{
			"name": "Get All Shows (Default Pagination)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has pagination metadata\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('totalRecords');",
							"    pm.expect(jsonData).to.have.property('currentPage');",
							"    pm.expect(jsonData).to.have.property('totalPages');",
							"    pm.expect(jsonData).to.have.property('pageSize');",
							"    pm.expect(jsonData).to.have.property('results');",
							"});",
							"",
							"pm.test(\"Results is an array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.results).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Page size matches default (25)\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.pageSize).to.equal(25);",
							"});",
							"",
							"pm.test(\"Current page is 1\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.currentPage).to.equal(1);",
							"});",
							"",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{API_KEY}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/shows",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"shows"
					]
				},
				"description": "Tests fetching all shows with default pagination (page 1, pageSize 25)"
			},
			"response": []
		},
		{
			"name": "Get All Shows (Custom Pagination)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Page size matches requested (10)\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.pageSize).to.equal(10);",
							"});",
							"",
							"pm.test(\"Current page is 2\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.currentPage).to.equal(2);",
							"});",
							"",
							"pm.test(\"Results array length does not exceed page size\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.results.length).to.be.at.most(10);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{API_KEY}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/shows?page=2&pageSize=10",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"shows"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						},
						{
							"key": "pageSize",
							"value": "10"
						}
					]
				},
				"description": "Tests custom pagination with page 2 and pageSize 10"
			},
			"response": []
		},
		{
			"name": "Get Shows by Name Filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has results\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('results');",
							"});",
							"",
							"pm.test(\"Results match name filter (case-insensitive)\", function () {",
							"    var jsonData = pm.response.json();",
							"    if (jsonData.results.length > 0) {",
							"        jsonData.results.forEach(function(show) {",
							"            pm.expect(show.name.toLowerCase()).to.include('the');",
							"        });",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{API_KEY}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/shows?name=the",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"shows"
					],
					"query": [
						{
							"key": "name",
							"value": "the"
						}
					]
				},
				"description": "Tests filtering shows by name (case-insensitive search)"
			},
			"response": []
		},
		{
			"name": "Get Shows by Genre Filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has results\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('results');",
							"});",
							"",
							"pm.test(\"Results match genre filter (case-insensitive)\", function () {",
							"    var jsonData = pm.response.json();",
							"    if (jsonData.results.length > 0) {",
							"        jsonData.results.forEach(function(show) {",
							"            if (show.genres) {",
							"                pm.expect(show.genres.toLowerCase()).to.include('drama');",
							"            }",
							"        });",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{API_KEY}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/shows?genre=Drama",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"shows"
					],
					"query": [
						{
							"key": "genre",
							"value": "Drama"
						}
					]
				},
				"description": "Tests filtering shows by genre (case-insensitive search)"
			},
			"response": []
		},
		{
			"name": "Get Shows by Year (2020)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 404\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Response has year and shows\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property('year');",
							"        pm.expect(jsonData).to.have.property('count');",
							"        pm.expect(jsonData).to.have.property('shows');",
							"    });",
							"    ",
							"    pm.test(\"Shows is an array\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData.shows).to.be.an('array');",
							"    });",
							"    ",
							"    pm.test(\"Count matches array length\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData.count).to.equal(jsonData.shows.length);",
							"    });",
							"    ",
							"    pm.test(\"Year in response matches requested year\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData.year).to.equal('2020');",
							"    });",
							"    ",
							"    pm.test(\"All shows are from the requested year\", function () {",
							"        var jsonData = pm.response.json();",
							"        jsonData.shows.forEach(function(show) {",
							"            if (show.first_air_date) {",
							"                var year = new Date(show.first_air_date).getFullYear();",
							"                pm.expect(year).to.equal(2020);",
							"            }",
							"        });",
							"    });",
							"} else {",
							"    pm.test(\"404 response has error message\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property('error');",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{API_KEY}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/shows/showbyyear/2020",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"shows",
						"showbyyear",
						"2020"
					]
				},
				"description": "Tests fetching shows by year (variable results based on year parameter). This satisfies the requirement for a route that queries the database with variable results."
			},
			"response": []
		},
		{
			"name": "Get Shows by Year (2021)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 404\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Year in response matches 2021\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData.year).to.equal('2021');",
							"    });",
							"    ",
							"    pm.test(\"Shows array exists and has content\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData.shows).to.be.an('array');",
							"        pm.expect(jsonData.shows.length).to.be.greaterThan(0);",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{API_KEY}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/shows/showbyyear/2021",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"shows",
						"showbyyear",
						"2021"
					]
				},
				"description": "Tests fetching shows for year 2021 (demonstrates variable results)"
			},
			"response": []
		},
		{
			"name": "Get Shows by Year (2024)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 404\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Year in response matches 2024\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData.year).to.equal('2024');",
							"    });",
							"    ",
							"    pm.test(\"Shows array exists and has content\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData.shows).to.be.an('array');",
							"        pm.expect(jsonData.shows.length).to.be.greaterThan(0);",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{API_KEY}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/shows/showbyyear/2024",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"shows",
						"showbyyear",
						"2024"
					]
				},
				"description": "Tests fetching shows for year 2024 (demonstrates variable results)"
			},
			"response": []
		},
		{
			"name": "Get Show by ID (Valid)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains show data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('name');",
							"});",
							"",
							"pm.test(\"Show ID matches requested ID\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.equal(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{API_KEY}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/shows/1",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"shows",
						"1"
					]
				},
				"description": "Tests fetching a specific show by ID"
			},
			"response": []
		},
		{
			"name": "Get Show by ID (Invalid/Not Found)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response has error message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"    pm.expect(jsonData.error).to.include('not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{API_KEY}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/shows/999999",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"shows",
						"999999"
					]
				},
				"description": "Tests 404 error handling when requesting a non-existent show ID"
			},
			"response": []
		},
		{
			"name": "Unauthorized Request (Missing API Key)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Response has error message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"    pm.expect(jsonData.error).to.include('Unauthorized');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/shows",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"shows"
					]
				},
				"description": "Tests API authentication by sending request without API key"
			},
			"response": []
		},
		{
			"name": "Unauthorized Request (Invalid API Key)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Response has error message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"    pm.expect(jsonData.error).to.include('Unauthorized');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "invalid-key-12345",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/shows",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"shows"
					]
				},
				"description": "Tests API authentication by sending request with invalid API key"
			},
			"response": []
		},
		{
			"name": "Register New User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response has token\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('token');",
							"    pm.expect(jsonData.token).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response has user object\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('user');",
							"    pm.expect(jsonData.user).to.have.property('email');",
							"    pm.expect(jsonData.user).to.have.property('role');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"testuser@example.com\",\n    \"password\": \"securePass123\",\n    \"phone\": \"1234567890\"\n}"
				},
				"url": {
					"raw": "{{BASE_URL}}/auth/register",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"auth",
						"register"
					]
				},
				"description": "Tests user registration with email validation and JWT token generation"
			},
			"response": []
		},
		{
			"name": "Login User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has token\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('token');",
							"    pm.expect(jsonData.token).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response has user object\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('user');",
							"    pm.expect(jsonData.user.email).to.equal('test@example.com');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"test123\"\n}"
				},
				"url": {
					"raw": "{{BASE_URL}}/auth/login",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"auth",
						"login"
					]
				},
				"description": "Tests user login with credentials and JWT token generation"
			},
			"response": []
		},
		{
			"name": "Create New Show",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response has success message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData.message).to.include('created');",
							"});",
							"",
							"pm.test(\"Response has show object\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('show');",
							"    pm.expect(jsonData.show).to.have.property('name');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{API_KEY}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Test Show\",\n    \"genres\": \"Drama;Action\",\n    \"first_air_date\": \"2024-01-15\",\n    \"overview\": \"A test TV show for API testing\",\n    \"vote_average\": 8.5,\n    \"status\": \"Returning Series\"\n}"
				},
				"url": {
					"raw": "{{BASE_URL}}/api/v1/shows",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"shows"
					]
				},
				"description": "Tests creating a new TV show with API key authentication"
			},
			"response": []
		},
		{
			"name": "Update Show by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData.message).to.include('updated');",
							"});",
							"",
							"pm.test(\"Response has updated show\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('show');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{API_KEY}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"vote_average\": 9.5,\n    \"status\": \"Ended\"\n}"
				},
				"url": {
					"raw": "{{BASE_URL}}/api/v1/shows/1",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"shows",
						"1"
					]
				},
				"description": "Tests updating an existing TV show with partial data"
			},
			"response": []
		},
		{
			"name": "Delete Show by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData.message).to.include('deleted');",
							"});",
							"",
							"pm.test(\"Response has deleted show info\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('deleted');",
							"    pm.expect(jsonData.deleted).to.have.property('id');",
							"    pm.expect(jsonData.deleted).to.have.property('name');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{API_KEY}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/shows/999",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"shows",
						"999"
					]
				},
				"description": "Tests deleting a TV show by ID (Note: Use an ID you created for testing)"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BASE_URL",
			"value": "https://helloworld-api-su2v.onrender.com",
			"type": "string"
		},
		{
			"key": "API_KEY",
			"value": "dev-12345",
			"type": "string"
		}
	]
}